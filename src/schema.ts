/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/regions": {
    /** Fetch all streaming regions. */
    get: operations["regions_fetch_regions"];
  };
  "/streams/": {
    /** Find global streams */
    get: operations["find_find_streams"];
    /**
     * Enable streaming on a user account.
     *
     * Requires creating a user first.
     */
    put: operations["create_create_stream"];
  };
  "/streams/@me": {
    /** Fetch own stream information */
    get: operations["fetch_fetch_own"];
    /** Edit stream information. */
    patch: operations["edit_edit_stream"];
  };
  "/streams/{path}": {
    /** Fetch a stream by stream path */
    get: operations["fetch_fetch_stream"];
  };
  "/streams/reset_token": {
    /** Reset the token used for this account's stream. */
    post: operations["reset_token_reset"];
  };
  "/users/@me": {
    /** Fetch own user. */
    get: operations["fetch_fetch_own"];
    /** Create a new user profile. */
    put: operations["create_create_user"];
    /** Edit user information. */
    patch: operations["edit_edit_user"];
  };
  "/users/{path}": {
    /** Fetch user using path. */
    get: operations["fetch_fetch_user"];
  };
  "/categories/create": {
    /** Create a new category of streams. */
    post: operations["create_create_category"];
  };
  "/categories/{id}": {
    /** Delete a streaming category. */
    delete: operations["delete_delete_category"];
    /** Change information for an existing category. */
    patch: operations["edit_edit_category"];
  };
  "/categories/": {
    /** List streaming categories available. */
    get: operations["list_list_categories"];
  };
  "/chat/{target}/messages": {
    /** Fetch chat message history for a stream. */
    get: operations["history_fetch_history"];
    /** Send a message to a stream chat. */
    post: operations["send_send_message"];
  };
  "/chat/{target}/messages/{id}": {
    /** Delete a message from chat by its id. */
    delete: operations["delete_delete_message"];
  };
  "/auth/account/create": {
    /** Create a new account. */
    post: operations["create_account_create_account"];
  };
  "/auth/account/reverify": {
    /** Resend account creation verification email. */
    post: operations["resend_verification_resend_verification"];
  };
  "/auth/account/": {
    /** Fetch account information from the current session. */
    get: operations["fetch_account_fetch_account"];
  };
  "/auth/account/change/password": {
    /** Change the current account password. */
    patch: operations["change_password_change_password"];
  };
  "/auth/account/change/email": {
    /** Change the associated account email. */
    patch: operations["change_email_change_email"];
  };
  "/auth/account/verify/{code}": {
    /** Verify an email address. */
    post: operations["verify_email_verify_email"];
  };
  "/auth/account/reset_password": {
    /** Send an email to reset account password. */
    post: operations["send_password_reset_send_password_reset"];
    /** Confirm password reset and change the password. */
    patch: operations["password_reset_password_reset"];
  };
  "/auth/session/login": {
    /** Login to an account. */
    post: operations["login_login"];
  };
  "/auth/session/logout": {
    /** Delete current session. */
    post: operations["logout_logout"];
  };
  "/auth/session/all": {
    /** Fetch all sessions associated with this account. */
    get: operations["fetch_all_fetch_all"];
    /** Delete all active sessions, optionally including current one. */
    delete: operations["revoke_all_revoke_all"];
  };
  "/auth/session/{id}": {
    /** Delete a specific active session. */
    delete: operations["revoke_revoke"];
    /** Edit current session information. */
    patch: operations["edit_edit"];
  };
}

export interface components {
  schemas: {
    Region: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description URL to connect to this server's signaling service */
      signaling?: string | null;
      /** @description URI to connect to this server's ingest service */
      ingest?: string | null;
      /** @description The location of this server */
      location?: string | null;
      /**
       * @description Last ping from this server
       *
       * If a server has not sent a ping within the past 30 seconds, assume it to be offline.
       */
      last_ping?: components["schemas"]["DateTimeContainer"] | null;
    };
    /** @description Container so we can apply this within Option<>s. */
    DateTimeContainer: components["schemas"]["DateTime"];
    /**
     * Format: int64
     * @description Local definition of DateTime from Bson
     */
    DateTime: number;
    /** Error */
    Error:
      | {
          /** @enum {string} */
          type: "LabelMe";
        }
      | {
          /** @enum {string} */
          type: "NotFound";
        }
      | {
          /** @enum {string} */
          type: "CategoryNotFound";
        }
      | {
          /** @enum {string} */
          type: "NotModerator";
        }
      | {
          /** @enum {string} */
          type: "InvalidInvite";
        }
      | {
          /** @enum {string} */
          type: "InvalidFile";
        }
      | {
          /** @enum {string} */
          type: "InternalError";
        }
      | {
          /** @enum {string} */
          type: "AlreadyExists";
        }
      | {
          /** @enum {string} */
          type: "UsernameInUse";
        }
      | {
          /** @enum {string} */
          type: "UsernameChangeNotAllowed";
        }
      | {
          /** @enum {string} */
          type: "DatabaseError";
          operation: string;
          with: string;
        }
      | {
          /** @enum {string} */
          type: "FailedValidation";
        }
      | {
          /** @enum {string} */
          type: "InvalidString";
        }
      | {
          /** @enum {string} */
          type: "InvalidOperation";
        };
    /** @description Any user live stream */
    Stream: {
      /** @description Internal ID */
      _id?: string | null;
      /**
       * Format: int32
       * @description ID used for FTL protocol
       */
      ftl_id?: number | null;
      /** @description Stream Title */
      title?: string | null;
      /** @description Stream Tags */
      tags?: string[];
      /** @description Stream Token for FTL */
      token?: string | null;
      /** @description Object providing additional information while live */
      live?: components["schemas"]["Live"] | null;
      /**
       * @description ID of category
       * @default default
       */
      category?: string;
      /** @description IDs of moderators */
      moderators?: string[];
    };
    /** @description Active live stream */
    Live: {
      /** @description When this stream started */
      started_at: components["schemas"]["DateTimeContainer"];
      /** @description Region clients should connect to in order to watch */
      region: string;
    };
    /** Stream Data */
    DataCreateStream: {
      /** @description Invite code provided by Lightspeed team */
      invite: string;
    };
    /** Stream Data */
    DataEditStream: {
      /** @description Stream title */
      title?: string | null;
      /** @description Stream tags */
      tags?: string[] | null;
      /** @description Stream category id */
      category?: string | null;
      /** @description List of user ids that can moderate stream chat */
      moderators?: string[] | null;
    };
    /** @description Combined stream information */
    AggregateStream: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description User information */
      user: components["schemas"]["User"];
      /** @description Stream information */
      stream: components["schemas"]["Stream"];
      /** @description Category information */
      category: components["schemas"]["Category"];
      /** @description Region this stream is currently live in */
      region?: components["schemas"]["Region"] | null;
    };
    User: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Path at which this user is accessible */
      path: string;
      /** @description Case-sensitive username */
      username: string;
      /** @description ID of avatar file */
      avatar?: string | null;
      /** @description ID of banner file */
      banner?: string | null;
      /** @description User profile bio */
      bio?: string;
      /** @description Social links */
      social_links?: components["schemas"]["SocialLink"][];
      /** @description Whether this user is privileged */
      privileged?: boolean;
    };
    SocialLink: {
      title: string;
      link: string;
    };
    Category: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Title for this category */
      title: string;
      /** @description ID of cover picture */
      cover?: string | null;
      /** @description Category description */
      description?: string;
    };
    /** User Data */
    DataCreateUser: {
      /** @description Username */
      username: string;
    };
    /** User Data */
    DataEditUser: {
      /** @description New username */
      username?: string | null;
      /** @description Attachment Id used for avatar */
      avatar?: string | null;
      /** @description Attachment Id used for banner */
      banner?: string | null;
      /** @description Profile bio */
      bio?: string | null;
      /** @description List of social links */
      social_links?: components["schemas"]["SocialLink"][] | null;
    };
    /** Category Data */
    DataCreateCategory: {
      /** @description Category title */
      title: string;
      /** @description Attachment Id for cover photo */
      cover?: string | null;
      /** @description Category description */
      description: string;
    };
    /** Category Data */
    DataEditCategory: {
      /** @description Category title */
      title?: string | null;
      /** @description Attachment Id for category photo */
      cover?: string | null;
      /** @description Category description */
      description?: string | null;
    };
    Message: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Stream ID */
      stream_id: string;
      /** @description User */
      author?: components["schemas"]["User"] | null;
      /** @description User ID */
      author_id: string;
      /** @description Message content */
      content: string;
    };
    /** Message Data */
    DataSendMessage: {
      /** @description Message content */
      content: string;
    };
    /** Account Data */
    DataCreateAccount: {
      /** @description Valid email address */
      email: string;
      /** @description Password */
      password: string;
      /** @description Invite code */
      invite?: string | null;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    /** Resend Information */
    DataResendVerification: {
      /** @description Email associated with the account */
      email: string;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    AccountInfo: {
      _id: string;
      email: string;
    };
    /** Change Data */
    DataChangePassword: {
      /** @description New password */
      password: string;
      /** @description Current password */
      current_password: string;
    };
    /** Change Data */
    DataChangeEmail: {
      /** @description Valid email address */
      email: string;
      /** @description Current password */
      current_password: string;
    };
    /** Password Reset */
    DataPasswordReset: {
      /** @description Reset token */
      token: string;
      /** @description New password */
      password: string;
    };
    /** Reset Information */
    DataSendPasswordReset: {
      /** @description Email associated with the account */
      email: string;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    ResponseLogin:
      | {
          /** @enum {string} */
          result: "Success";
          _id?: string | null;
          user_id: string;
          token: string;
          name: string;
          subscription?: components["schemas"]["WebPushSubscription"] | null;
        }
      | {
          /** @enum {string} */
          result: "EmailOTP";
        }
      | {
          /** @enum {string} */
          result: "MFA";
          ticket: string;
          allowed_methods: string[];
        };
    WebPushSubscription: {
      endpoint: string;
      p256dh: string;
      auth: string;
    };
    /** Login Data */
    DataLogin: {
      /** @description Email */
      email: string;
      /** @description Password */
      password?: string | null;
      /** @description UN-USED: MFA challenge */
      challenge?: string | null;
      /** @description Friendly name used for the session */
      friendly_name?: string | null;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    SessionInfo: {
      _id: string;
      name: string;
    };
    Session: {
      _id?: string | null;
      user_id: string;
      token: string;
      name: string;
      subscription?: components["schemas"]["WebPushSubscription"] | null;
    };
    /** Edit Data */
    DataEditSession: {
      /** @description Session friendly name */
      friendly_name: string;
    };
  };
}

export interface operations {
  /** Fetch all streaming regions. */
  regions_fetch_regions: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Region"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Find global streams */
  find_find_streams: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AggregateStream"][];
        };
      };
    };
  };
  /**
   * Enable streaming on a user account.
   *
   * Requires creating a user first.
   */
  create_create_stream: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateStream"];
      };
    };
  };
  /** Fetch own user. */
  fetch_fetch_own: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Edit stream information. */
  edit_edit_stream: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditStream"];
      };
    };
  };
  /** Fetch a stream by stream path */
  fetch_fetch_stream: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AggregateStream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Reset the token used for this account's stream. */
  reset_token_reset: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new user profile. */
  create_create_user: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateUser"];
      };
    };
  };
  /** Edit user information. */
  edit_edit_user: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditUser"];
      };
    };
  };
  /** Fetch user using path. */
  fetch_fetch_user: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new category of streams. */
  create_create_category: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateCategory"];
      };
    };
  };
  /** Delete a streaming category. */
  delete_delete_category: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Change information for an existing category. */
  edit_edit_category: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditCategory"];
      };
    };
  };
  /** List streaming categories available. */
  list_list_categories: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch chat message history for a stream. */
  history_fetch_history: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Send a message to a stream chat. */
  send_send_message: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataSendMessage"];
      };
    };
  };
  /** Delete a message from chat by its id. */
  delete_delete_message: {
    parameters: {
      path: {
        target: string;
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new account. */
  create_account_create_account: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateAccount"];
      };
    };
  };
  /** Resend account creation verification email. */
  resend_verification_resend_verification: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataResendVerification"];
      };
    };
  };
  /** Fetch account information from the current session. */
  fetch_account_fetch_account: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountInfo"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Change the current account password. */
  change_password_change_password: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataChangePassword"];
      };
    };
  };
  /** Change the associated account email. */
  change_email_change_email: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataChangeEmail"];
      };
    };
  };
  /** Verify an email address. */
  verify_email_verify_email: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Send an email to reset account password. */
  send_password_reset_send_password_reset: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataSendPasswordReset"];
      };
    };
  };
  /** Confirm password reset and change the password. */
  password_reset_password_reset: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataPasswordReset"];
      };
    };
  };
  /** Login to an account. */
  login_login: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponseLogin"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataLogin"];
      };
    };
  };
  /** Delete current session. */
  logout_logout: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch all sessions associated with this account. */
  fetch_all_fetch_all: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionInfo"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete all active sessions, optionally including current one. */
  revoke_all_revoke_all: {
    parameters: {
      query: {
        revoke_self?: boolean | null;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a specific active session. */
  revoke_revoke: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Edit current session information. */
  edit_edit: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Session"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditSession"];
      };
    };
  };
}

export interface external {}
