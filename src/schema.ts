/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/regions": {
    /** Fetch all streaming regions. */
    get: operations["regions_fetch_regions"];
  };
  "/streams/": {
    /** Find global streams */
    get: operations["find_find_streams"];
    /**
     * Enable streaming on a user account.
     *
     * Requires creating a user first.
     */
    put: operations["create_create_stream"];
  };
  "/streams/@me": {
    /** Fetch own stream information */
    get: operations["fetch_fetch_own"];
    /** Edit stream information. */
    patch: operations["edit_edit_stream"];
  };
  "/streams/{path}": {
    /** Fetch a stream by stream path */
    get: operations["fetch_fetch_stream"];
  };
  "/streams/{path}/bans": {
    /** Fetch all banned users in a stream */
    get: operations["fetch_bans_fetch_bans"];
  };
  "/streams/{path}/moderators": {
    /** Fetch all moderator information for stream */
    get: operations["fetch_moderators_fetch_moderators"];
  };
  "/streams/reset_token": {
    /** Reset the token used for this account's stream. */
    post: operations["reset_token_reset"];
  };
  "/streams/{stream_id}/bans/{user_id}": {
    /** Permanently ban a user from talking. */
    put: operations["ban_ban_user"];
    /** Unban a user. */
    delete: operations["pardon_pardon_user"];
  };
  "/streams/{target}/follow": {
    put: operations["follow_follow_stream"];
    delete: operations["unfollow_unfollow_stream"];
  };
  "/streams/{stream_id}/mods/{user_id}": {
    /** Give a target user moderation powers on a stream. */
    put: operations["promote_promote_user"];
    /** Take away a target user's moderation powers on a stream. */
    delete: operations["demote_demote_user"];
  };
  "/users/@me": {
    /** Fetch own user. */
    get: operations["fetch_fetch_own"];
    /** Create a new user profile. */
    put: operations["create_create_user"];
    /** Edit user information. */
    patch: operations["edit_edit_user"];
  };
  "/users/{path}": {
    /** Fetch user using path. */
    get: operations["fetch_fetch_user"];
  };
  "/users/bans": {
    /** Fetch all of your bans */
    get: operations["fetch_bans_fetch_bans"];
  };
  "/categories/create": {
    /** Create a new category of streams. */
    post: operations["create_create_category"];
  };
  "/categories/{id}": {
    /** Delete a streaming category. */
    delete: operations["delete_delete_category"];
    /** Change information for an existing category. */
    patch: operations["edit_edit_category"];
  };
  "/categories/": {
    /** List streaming categories available. */
    get: operations["list_list_categories"];
  };
  "/chat/{target}/messages": {
    /** Fetch chat message history for a stream. */
    get: operations["history_fetch_history"];
    /** Send a message to a stream chat. */
    post: operations["send_send_message"];
  };
  "/chat/{target}/messages/{id}": {
    /** Delete a message from chat by its id. */
    delete: operations["delete_delete_message"];
  };
  "/admin/invites": {
    /** List all pending and used stream invites. */
    get: operations["list_stream_invites_list_stream_invites"];
    /** Create a new invite for streaming. */
    post: operations["create_stream_invite_create_stream_invite"];
  };
  "/admin/invites/{code}": {
    /** Delete an existing unclaimed stream invite. */
    delete: operations["delete_stream_invite_delete_stream_invite"];
  };
  "/admin/streams/{stream_id}": {
    /** Edit stream information. */
    patch: operations["edit_stream_edit_stream"];
  };
  "/admin/users/{user_id}": {
    /** Edit user information. */
    patch: operations["edit_user_edit_user"];
  };
  "/admin/livestreams": {
    /** Find all live streams regardless of if they're hidden */
    get: operations["list_livestreams_list_livestreams"];
  };
  "/admin/streams/{stream_id}/stop": {
    /** Disconnect all users from a stream and stop it. */
    post: operations["stop_stream_stop_stream"];
  };
  "/reports/send": {
    /** Report something to Lightspeed. */
    post: operations["send_report_send_report"];
  };
  "/auth/account/create": {
    /** Create a new account. */
    post: operations["create_account_create_account"];
  };
  "/auth/account/reverify": {
    /** Resend account creation verification email. */
    post: operations["resend_verification_resend_verification"];
  };
  "/auth/account/delete": {
    /** Schedule an account for deletion by confirming the received token. */
    put: operations["confirm_deletion_confirm_deletion"];
    /** Request to have an account deleted. */
    post: operations["delete_account_delete_account"];
  };
  "/auth/account/": {
    /** Fetch account information from the current session. */
    get: operations["fetch_account_fetch_account"];
  };
  "/auth/account/disable": {
    /** Disable an account. */
    post: operations["disable_account_disable_account"];
  };
  "/auth/account/change/password": {
    /** Change the current account password. */
    patch: operations["change_password_change_password"];
  };
  "/auth/account/change/email": {
    /** Change the associated account email. */
    patch: operations["change_email_change_email"];
  };
  "/auth/account/verify/{code}": {
    /** Verify an email address. */
    post: operations["verify_email_verify_email"];
  };
  "/auth/account/reset_password": {
    /** Send an email to reset account password. */
    post: operations["send_password_reset_send_password_reset"];
    /** Confirm password reset and change the password. */
    patch: operations["password_reset_password_reset"];
  };
  "/auth/session/login": {
    /** Login to an account. */
    post: operations["login_login"];
  };
  "/auth/session/logout": {
    /** Delete current session. */
    post: operations["logout_logout"];
  };
  "/auth/session/all": {
    /** Fetch all sessions associated with this account. */
    get: operations["fetch_all_fetch_all"];
    /** Delete all active sessions, optionally including current one. */
    delete: operations["revoke_all_revoke_all"];
  };
  "/auth/session/{id}": {
    /** Delete a specific active session. */
    delete: operations["revoke_revoke"];
    /** Edit current session information. */
    patch: operations["edit_edit"];
  };
  "/auth/mfa/ticket": {
    /** Create a new MFA ticket or validate an existing one. */
    put: operations["create_ticket_create_ticket"];
  };
  "/auth/mfa/": {
    /** Fetch MFA status of an account. */
    get: operations["fetch_status_fetch_status"];
  };
  "/auth/mfa/recovery": {
    /** Fetch recovery codes for an account. */
    post: operations["fetch_recovery_fetch_recovery"];
    /** Re-generate recovery codes for an account. */
    patch: operations["generate_recovery_generate_recovery"];
  };
  "/auth/mfa/methods": {
    /** Fetch available MFA methods. */
    get: operations["get_mfa_methods_get_mfa_methods"];
  };
  "/auth/mfa/totp": {
    /** Generate a new secret for TOTP. */
    put: operations["totp_enable_totp_enable"];
    /** Generate a new secret for TOTP. */
    post: operations["totp_generate_secret_totp_generate_secret"];
    /** Disable TOTP 2FA for an account. */
    delete: operations["totp_disable_totp_disable"];
  };
}

export interface components {
  schemas: {
    Region: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Publicly accessible server hostname */
      hostname?: string | null;
      /** @description URL to connect to this server's signaling service */
      signaling?: string | null;
      /** @description URI to connect to this server's ingest service */
      ingest?: string | null;
      /** @description The location of this server */
      location?: string | null;
      /**
       * @description Last ping from this server
       *
       * If a server has not sent a ping within the past 30 seconds, assume it to be offline.
       */
      last_ping?: components["schemas"]["ISO8601 Timestamp"] | null;
    };
    /**
     * Format: date-time
     * @description ISO8601 formatted timestamp
     * @example 1970-01-01T00:00:00Z
     */
    "ISO8601 Timestamp": string;
    /** Error */
    Error:
      | {
          /** @enum {string} */
          type: "LabelMe";
        }
      | {
          /** @enum {string} */
          type: "NotFound";
        }
      | {
          /** @enum {string} */
          type: "CategoryNotFound";
        }
      | {
          /** @enum {string} */
          type: "NotModerator";
        }
      | {
          /** @enum {string} */
          type: "AlreadyBanned";
        }
      | {
          /** @enum {string} */
          type: "AlreadyModerator";
        }
      | {
          /** @enum {string} */
          type: "UserIsNotBanned";
        }
      | {
          /** @enum {string} */
          type: "InvalidInvite";
        }
      | {
          /** @enum {string} */
          type: "InvalidFile";
        }
      | {
          /** @enum {string} */
          type: "InternalError";
        }
      | {
          /** @enum {string} */
          type: "BadGateway";
        }
      | {
          /** @enum {string} */
          type: "AlreadyExists";
        }
      | {
          /** @enum {string} */
          type: "UsernameInUse";
        }
      | {
          /** @enum {string} */
          type: "UsernameChangeNotAllowed";
        }
      | {
          /** @enum {string} */
          type: "DatabaseError";
          operation: string;
          with: string;
        }
      | {
          /** @enum {string} */
          type: "FailedValidation";
        }
      | {
          /** @enum {string} */
          type: "InvalidString";
        }
      | {
          /** @enum {string} */
          type: "InvalidOperation";
        }
      | {
          /** @enum {string} */
          type: "TooManyRequests";
          /** Format: uint128 */
          retry_after: number;
        }
      | {
          /** @enum {string} */
          type: "Banned";
        };
    /** @description Any user live stream */
    Stream: {
      /** @description Internal ID */
      _id?: string | null;
      /**
       * Format: int32
       * @description ID used for FTL protocol
       */
      ftl_id?: number | null;
      /** @description Stream Title */
      title?: string | null;
      /** @description Stream Description */
      description?: string | null;
      /** @description ID of thumbnail file */
      thumbnail?: string | null;
      /** @description Stream Tags */
      tags?: string[];
      /** @description Stream Token for FTL */
      token?: string | null;
      /** @description Object providing additional information while live */
      live?: components["schemas"]["Live"] | null;
      /**
       * @description ID of category
       * @default default
       */
      category?: string;
      /** @description IDs of moderators */
      moderators?: string[];
      /**
       * @description Whether to record VODs for this stream
       * @default true
       */
      record?: boolean;
      /** @description Whether this stream is currently prohibited from going live */
      suspended?: boolean;
      /** @description RTMP URL to relay the stream to */
      rtmp_relay?: string | null;
      /** @description Time at which the last stream ended */
      last_streamed?: components["schemas"]["ISO8601 Timestamp"] | null;
    };
    /** @description Active live stream */
    Live: {
      /** @description When this stream started */
      started_at: components["schemas"]["ISO8601 Timestamp"];
      /** @description Region clients should connect to in order to watch */
      region: string;
      /**
       * @description Enum determining how clients should connect to this live stream
       * @default Inhouse
       */
      controller?: components["schemas"]["Controller"];
    };
    /**
     * @description Controller for live stream that clients connect to
     * @enum {string}
     */
    Controller: "Inhouse" | "Mist";
    /** Stream Data */
    DataCreateStream: {
      /** @description Invite code provided by Lightspeed team */
      invite: string;
    };
    /** Stream Data */
    DataEditStream: {
      /** @description Stream title */
      title?: string | null;
      /** @description Stream description */
      description?: string | null;
      /** @description Attachment Id used for thumbnail */
      thumbnail?: string | null;
      /** @description Stream tags */
      tags?: string[] | null;
      /** @description Stream category id */
      category?: string | null;
      /** @description RTMP Relay */
      rtmp_relay?: string | null;
      /** @description Whether this stream is prohibited from going live */
      suspended?: boolean | null;
    };
    /** @description Combined stream information */
    AggregateStream: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description User information */
      user: components["schemas"]["User"];
      /** @description Stream information */
      stream: components["schemas"]["Stream"];
      /** @description Category information */
      category: components["schemas"]["Category"];
      /** @description Region this stream is currently live in */
      region?: components["schemas"]["Region"] | null;
      /**
       * Format: int64
       * @description Number of followers this stream has
       */
      follower_count?: number | null;
    };
    User: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Path at which this user is accessible */
      path: string;
      /** @description Case-sensitive username */
      username: string;
      /** @description ID of avatar file */
      avatar?: string | null;
      /** @description ID of banner file */
      banner?: string | null;
      /** @description User profile bio */
      bio?: string;
      /** @description Social links */
      social_links?: components["schemas"]["SocialLink"][];
      /** @description Accent Colour */
      accent_colour?: string;
      /** @description Whether this user is privileged */
      privileged?: boolean;
      /** @description Hide user and their stream from public discovery */
      hidden?: boolean;
      /** @description Whether this user is globally chat muted */
      chat_restricted?: boolean;
      /** @description Request only: Other users this user is following */
      following?: components["schemas"]["User"][];
      /** @description Request only: IDs of other users this user is following */
      following_ids?: string[];
    };
    SocialLink: {
      title: string;
      link: string;
    };
    Category: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Title for this category */
      title: string;
      /** @description ID of cover picture */
      cover?: string | null;
      /** @description Category description */
      description?: string;
    };
    /** Ban List */
    ResponseBanList: {
      /** @description Bans */
      bans: components["schemas"]["Ban"][];
      /** @description Users */
      users: components["schemas"]["User"][];
    };
    /** @description Represenation of a chat ban on Lightspeed */
    Ban: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Stream ID */
      stream_id: string;
      /** @description User ID */
      user_id: string;
      /** @description Mod ID */
      mod_id: string;
      /** @description Ban reason */
      reason?: string;
      /** @description Time to expire */
      expires?: components["schemas"]["ISO8601 Timestamp"] | null;
    };
    /** Ban Data */
    DataBanUser: {
      /** @description Time at which this ban expires */
      expires?: components["schemas"]["ISO8601 Timestamp"] | null;
    };
    /** User Data */
    DataCreateUser: {
      /** @description Username */
      username: string;
    };
    /** User Data */
    DataEditUser: {
      /** @description New username */
      username?: string | null;
      /** @description Attachment Id used for avatar */
      avatar?: string | null;
      /** @description Attachment Id used for banner */
      banner?: string | null;
      /** @description Profile bio */
      bio?: string | null;
      /** @description List of social links */
      social_links?: components["schemas"]["SocialLink"][] | null;
      /** @description Accent colour */
      accent_colour?: string | null;
      /** @description Whether to hide the user and stream from public discovery */
      hidden?: boolean | null;
      /** @description Whether to restrict the user from chatting globally */
      chat_restricted?: boolean | null;
    };
    /** @description Information about a user's ban on Lightspeed */
    BanInformation: {
      /** @description Stream ID */
      stream_id: string;
      /** @description Time to expire */
      expires?: components["schemas"]["ISO8601 Timestamp"] | null;
    };
    /** Category Data */
    DataCreateCategory: {
      /** @description Category title */
      title: string;
      /** @description Attachment Id for cover photo */
      cover?: string | null;
      /** @description Category description */
      description: string;
    };
    /** Category Data */
    DataEditCategory: {
      /** @description Category title */
      title?: string | null;
      /** @description Attachment Id for category photo */
      cover?: string | null;
      /** @description Category description */
      description?: string | null;
    };
    Message: {
      /** @description Internal ID */
      _id?: string | null;
      /** @description Stream ID */
      stream_id: string;
      /** @description User */
      author?: components["schemas"]["UserInformation"] | null;
      /** @description User ID */
      author_id: string;
      /** @description Message content */
      content: string;
    };
    /** @description Minimal information to display user in chat or similar location */
    UserInformation: {
      /** @description User ID */
      id: string;
      /** @description Path at which this user is accessible */
      path: string;
      /** @description Case-sensitive username */
      username: string;
      /** @description ID of avatar file */
      avatar?: string | null;
      /** @description Accent Colour */
      accent_colour?: string;
    };
    /** Message Data */
    DataSendMessage: {
      /** @description Message content */
      content: string;
    };
    /** Invite Data */
    DataCreateInvite: {
      /** @description Invite code */
      code: string;
    };
    /**
     * @description Invite Information
     *
     * Newtype to avoid errors with schemas
     */
    InviteInformation: {
      id: string;
      used: boolean;
      claimed_by?: string | null;
    };
    /** Report Data */
    DataReportContent: {
      /** @description Content to report */
      content: components["schemas"]["ReportedContent"];
      /** @description Report description */
      reason: string;
    };
    /** @description The content being reported */
    ReportedContent:
      | {
          /** @enum {string} */
          type: "Stream";
          /** @description Path to stream */
          path: string;
        }
      | {
          /** @enum {string} */
          type: "User";
          /** @description ID of the user */
          id: string;
        };
    /** Error */
    "Authifier Error":
      | {
          /** @enum {string} */
          type: "IncorrectData";
          with: string;
        }
      | {
          /** @enum {string} */
          type: "DatabaseError";
          operation: string;
          with: string;
        }
      | {
          /** @enum {string} */
          type: "InternalError";
        }
      | {
          /** @enum {string} */
          type: "OperationFailed";
        }
      | {
          /** @enum {string} */
          type: "RenderFail";
        }
      | {
          /** @enum {string} */
          type: "MissingHeaders";
        }
      | {
          /** @enum {string} */
          type: "CaptchaFailed";
        }
      | {
          /** @enum {string} */
          type: "InvalidSession";
        }
      | {
          /** @enum {string} */
          type: "UnverifiedAccount";
        }
      | {
          /** @enum {string} */
          type: "UnknownUser";
        }
      | {
          /** @enum {string} */
          type: "EmailFailed";
        }
      | {
          /** @enum {string} */
          type: "InvalidToken";
        }
      | {
          /** @enum {string} */
          type: "MissingInvite";
        }
      | {
          /** @enum {string} */
          type: "InvalidInvite";
        }
      | {
          /** @enum {string} */
          type: "InvalidCredentials";
        }
      | {
          /** @enum {string} */
          type: "CompromisedPassword";
        }
      | {
          /** @enum {string} */
          type: "ShortPassword";
        }
      | {
          /** @enum {string} */
          type: "Blacklisted";
        }
      | {
          /** @enum {string} */
          type: "LockedOut";
        }
      | {
          /** @enum {string} */
          type: "TotpAlreadyEnabled";
        }
      | {
          /** @enum {string} */
          type: "DisallowedMFAMethod";
        };
    /** Account Data */
    DataCreateAccount: {
      /** @description Valid email address */
      email: string;
      /** @description Password */
      password: string;
      /** @description Invite code */
      invite?: string | null;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    /** Resend Information */
    DataResendVerification: {
      /** @description Email associated with the account */
      email: string;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    /** Account Deletion Token */
    DataAccountDeletion: {
      /** @description Deletion token */
      token: string;
    };
    AccountInfo: {
      _id: string;
      email: string;
    };
    /** Change Data */
    DataChangePassword: {
      /** @description New password */
      password: string;
      /** @description Current password */
      current_password: string;
    };
    /** Change Data */
    DataChangeEmail: {
      /** @description Valid email address */
      email: string;
      /** @description Current password */
      current_password: string;
    };
    ResponseVerify: Partial<unknown> &
      Partial<{
        /** @description Authorised MFA ticket, can be used to log in */
        ticket: components["schemas"]["MFATicket"];
      }>;
    /** @description Multi-factor auth ticket */
    MFATicket: {
      /** @description Unique Id */
      _id: string;
      /** @description Account Id */
      account_id: string;
      /** @description Unique Token */
      token: string;
      /** @description Whether this ticket has been validated (can be used for account actions) */
      validated: boolean;
      /** @description Whether this ticket is authorised (can be used to log a user in) */
      authorised: boolean;
      /** @description TOTP code at time of ticket creation */
      last_totp_code?: string | null;
    };
    /** Password Reset */
    DataPasswordReset: {
      /** @description Reset token */
      token: string;
      /** @description New password */
      password: string;
      /** @description Whether to logout all sessions */
      remove_sessions?: boolean;
    };
    /** Reset Information */
    DataSendPasswordReset: {
      /** @description Email associated with the account */
      email: string;
      /** @description Captcha verification code */
      captcha?: string | null;
    };
    ResponseLogin:
      | {
          /** @enum {string} */
          result: "Success";
          /** @description Unique Id */
          _id: string;
          /** @description User Id */
          user_id: string;
          /** @description Session token */
          token: string;
          /** @description Display name */
          name: string;
          /** @description Web Push subscription */
          subscription?: components["schemas"]["WebPushSubscription"] | null;
        }
      | {
          /** @enum {string} */
          result: "MFA";
          ticket: string;
          allowed_methods: components["schemas"]["MFAMethod"][];
        }
      | {
          /** @enum {string} */
          result: "Disabled";
          user_id: string;
        };
    /** @description Web Push subscription */
    WebPushSubscription: {
      endpoint: string;
      p256dh: string;
      auth: string;
    };
    /**
     * @description MFA method
     * @enum {string}
     */
    MFAMethod: "Password" | "Recovery" | "Totp";
    /** Login Data */
    DataLogin: Partial<{
      /** @description Email */
      email: string;
      /** @description Password */
      password: string;
      /** @description Friendly name used for the session */
      friendly_name?: string | null;
    }> &
      Partial<{
        /**
         * @description Unvalidated or authorised MFA ticket
         *
         * Used to resolve the correct account
         */
        mfa_ticket: string;
        /**
         * @description Valid MFA response
         *
         * This will take precedence over the `password` field where applicable
         */
        mfa_response?: components["schemas"]["MFAResponse"] | null;
        /** @description Friendly name used for the session */
        friendly_name?: string | null;
      }>;
    /** @description MFA response */
    MFAResponse: Partial<{
      password: string;
    }> &
      Partial<{
        recovery_code: string;
      }> &
      Partial<{
        totp_code: string;
      }>;
    SessionInfo: {
      _id: string;
      name: string;
    };
    /** Edit Data */
    DataEditSession: {
      /** @description Session friendly name */
      friendly_name: string;
    };
    MultiFactorStatus: {
      email_otp: boolean;
      trusted_handover: boolean;
      email_mfa: boolean;
      totp_mfa: boolean;
      security_key_mfa: boolean;
      recovery_active: boolean;
    };
    /** Totp Secret */
    ResponseTotpSecret: {
      secret: string;
    };
  };
}

export interface operations {
  /** Fetch all streaming regions. */
  regions_fetch_regions: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Region"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Find global streams */
  find_find_streams: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AggregateStream"][];
        };
      };
    };
  };
  /**
   * Enable streaming on a user account.
   *
   * Requires creating a user first.
   */
  create_create_stream: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateStream"];
      };
    };
  };
  /** Fetch own user. */
  fetch_fetch_own: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Edit stream information. */
  edit_edit_stream: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditStream"];
      };
    };
  };
  /** Fetch a stream by stream path */
  fetch_fetch_stream: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AggregateStream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch all of your bans */
  fetch_bans_fetch_bans: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BanInformation"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch all moderator information for stream */
  fetch_moderators_fetch_moderators: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Reset the token used for this account's stream. */
  reset_token_reset: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Permanently ban a user from talking. */
  ban_ban_user: {
    parameters: {
      path: {
        stream_id: string;
        user_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Ban"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataBanUser"];
      };
    };
  };
  /** Unban a user. */
  pardon_pardon_user: {
    parameters: {
      path: {
        stream_id: string;
        user_id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  follow_follow_stream: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  unfollow_unfollow_stream: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Give a target user moderation powers on a stream. */
  promote_promote_user: {
    parameters: {
      path: {
        stream_id: string;
        user_id: string;
      };
    };
    responses: {
      200: unknown;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Take away a target user's moderation powers on a stream. */
  demote_demote_user: {
    parameters: {
      path: {
        stream_id: string;
        user_id: string;
      };
    };
    responses: {
      200: unknown;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new user profile. */
  create_create_user: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateUser"];
      };
    };
  };
  /** Edit user information. */
  edit_edit_user: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditUser"];
      };
    };
  };
  /** Fetch user using path. */
  fetch_fetch_user: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new category of streams. */
  create_create_category: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateCategory"];
      };
    };
  };
  /** Delete a streaming category. */
  delete_delete_category: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Change information for an existing category. */
  edit_edit_category: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditCategory"];
      };
    };
  };
  /** List streaming categories available. */
  list_list_categories: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Category"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch chat message history for a stream. */
  history_fetch_history: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Send a message to a stream chat. */
  send_send_message: {
    parameters: {
      path: {
        target: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataSendMessage"];
      };
    };
  };
  /** Delete a message from chat by its id. */
  delete_delete_message: {
    parameters: {
      path: {
        target: string;
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** List all pending and used stream invites. */
  list_stream_invites_list_stream_invites: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InviteInformation"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new invite for streaming. */
  create_stream_invite_create_stream_invite: {
    responses: {
      200: unknown;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateInvite"];
      };
    };
  };
  /** Delete an existing unclaimed stream invite. */
  delete_stream_invite_delete_stream_invite: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      200: unknown;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Edit stream information. */
  edit_stream_edit_stream: {
    parameters: {
      path: {
        stream_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditStream"];
      };
    };
  };
  /** Edit user information. */
  edit_user_edit_user: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditUser"];
      };
    };
  };
  /** Find all live streams regardless of if they're hidden */
  list_livestreams_list_livestreams: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AggregateStream"][];
        };
      };
    };
  };
  /** Disconnect all users from a stream and stop it. */
  stop_stream_stop_stream: {
    parameters: {
      path: {
        stream_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Stream"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Report something to Lightspeed. */
  send_report_send_report: {
    responses: {
      200: unknown;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataReportContent"];
      };
    };
  };
  /** Create a new account. */
  create_account_create_account: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataCreateAccount"];
      };
    };
  };
  /** Resend account creation verification email. */
  resend_verification_resend_verification: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataResendVerification"];
      };
    };
  };
  /** Schedule an account for deletion by confirming the received token. */
  confirm_deletion_confirm_deletion: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataAccountDeletion"];
      };
    };
  };
  /** Request to have an account deleted. */
  delete_account_delete_account: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch account information from the current session. */
  fetch_account_fetch_account: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountInfo"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Disable an account. */
  disable_account_disable_account: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Change the current account password. */
  change_password_change_password: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataChangePassword"];
      };
    };
  };
  /** Change the associated account email. */
  change_email_change_email: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataChangeEmail"];
      };
    };
  };
  /** Verify an email address. */
  verify_email_verify_email: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponseVerify"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Send an email to reset account password. */
  send_password_reset_send_password_reset: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataSendPasswordReset"];
      };
    };
  };
  /** Confirm password reset and change the password. */
  password_reset_password_reset: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataPasswordReset"];
      };
    };
  };
  /** Login to an account. */
  login_login: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponseLogin"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataLogin"];
      };
    };
  };
  /** Delete current session. */
  logout_logout: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch all sessions associated with this account. */
  fetch_all_fetch_all: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionInfo"][];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete all active sessions, optionally including current one. */
  revoke_all_revoke_all: {
    parameters: {
      query: {
        revoke_self?: boolean | null;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a specific active session. */
  revoke_revoke: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Edit current session information. */
  edit_edit: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionInfo"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataEditSession"];
      };
    };
  };
  /** Create a new MFA ticket or validate an existing one. */
  create_ticket_create_ticket: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MFATicket"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MFAResponse"];
      };
    };
  };
  /** Fetch MFA status of an account. */
  fetch_status_fetch_status: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MultiFactorStatus"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch recovery codes for an account. */
  fetch_recovery_fetch_recovery: {
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Re-generate recovery codes for an account. */
  generate_recovery_generate_recovery: {
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch available MFA methods. */
  get_mfa_methods_get_mfa_methods: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MFAMethod"][];
        };
      };
    };
  };
  /** Generate a new secret for TOTP. */
  totp_enable_totp_enable: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MFAResponse"];
      };
    };
  };
  /** Generate a new secret for TOTP. */
  totp_generate_secret_totp_generate_secret: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponseTotpSecret"];
        };
      };
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Disable TOTP 2FA for an account. */
  totp_disable_totp_disable: {
    responses: {
      /** Success */
      204: never;
      /** An error occurred. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
